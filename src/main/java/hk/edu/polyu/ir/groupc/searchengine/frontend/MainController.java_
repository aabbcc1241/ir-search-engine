package hk.edu.polyu.ir.groupc.searchengine.frontend;

import comm.exception.RichFileNotFoundException;
import comm.gui.AlertUtils;
import comm.gui.GuiUtils;
import hk.edu.polyu.ir.groupc.searchengine.Debug;
import hk.edu.polyu.ir.groupc.searchengine.Launcher;
import hk.edu.polyu.ir.groupc.searchengine.model.query.QueryFactory;
import hk.edu.polyu.ir.groupc.searchengine.model.query.RetrievalModel;
import hk.edu.polyu.ir.groupc.searchengine.model.query.SimpleModel;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.scene.Cursor;
import scala.Option;

import java.awt.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Created by beenotung on 11/9/15.
 */
public class MainController extends MainControllerSkeleton {
    private static final ArrayList<RetrievalModel> MODELS;
    static {
        MODELS=new ArrayList<>();
        MODELS.add(new SimpleModel());
    }
    private static MainController instance;

    int resultId = 0;
    Launcher launcher;

    public MainController() {
        instance = this;
    }

    public static MainController getInstance() {
        if (instance == null) throw new IllegalStateException("MainController has not been created");
        return instance;
    }

    public static void statusMain(String msg) {
//        Debug.log_(msg);
        Platform.runLater(() -> {
            getInstance().setLeftStatus(msg);
        });
    }

    public static void statusMinor(String msg) {
//        Debug.log_(msg);
        Platform.runLater(() -> {
            getInstance().setRightStatus(msg);
        });
    }

    public static void statusReset() {
        getInstance().resetStatus();
    }

    public static String getMajorStatus() {
        return getInstance().label_left_status.getText();
    }

    public static void statusDone() {
        Platform.runLater(() -> {
            statusDone(getInstance().label_left_status.getText());
        });
    }

    public static void statusDone(String lastAction) {
        Platform.runLater(() -> {
            getInstance().doneStatus(lastAction);
        });
    }

    @Override
    void set_query_file(ActionEvent event) {
        String action = "load query";
        Debug.logMainStatus(action);
        statusMain(action);
        Option<String> option = GuiUtils.pickFile(MainApplication.getInstance().getStage());
        if (option.isEmpty()) return;
        String queryFilePath = option.get();
        text_query_file.setText(queryFilePath);
        try {
            QueryFactory.loadFromFile(new File(queryFilePath));
            Debug.logDone(action);
        } catch (RichFileNotFoundException e) {
            Debug.loge("Failed to load query", e);
        }
    }

    @Override
    void set_result_path(ActionEvent event) {
        Option<String> directoryOption = GuiUtils.pickDirectory(MainApplication.getInstance().getStage());
        if (directoryOption.isEmpty()) return;
        String resultPath = directoryOption.get();
        text_result_path.setText(resultPath);
        Debug.logDone("set result path");
    }

    void setLeftStatus(String msg) {
        label_left_status.setText(msg);
    }

    void setRightStatus(String msg) {
        label_right_status.setText(msg);
    }

    @Override
    void set_data_path(ActionEvent event) {
        Option<String> directorOption = GuiUtils.pickDirectory(MainApplication.getInstance().getStage());
        if (directorOption.isEmpty()) return;
        String dataPath = directorOption.get();
        text_data_path.setText(dataPath);
        MainApplication.getInstance().getStage().getScene().setCursor(Cursor.WAIT);
        new Thread(MainApplication.threadGroup, "setDataPathThread") {
            @Override
            public void run() {
                try {
                    Debug.log("set data path to <" + dataPath + ">", true, false);
                    launcher = new Launcher() {
                        {
                            filePath(dataPath + "/file.txt");
                            termIndexPath(dataPath + "/term_index.txt");
                            postPath(dataPath + "/post1.txt");
                            stopPath(dataPath + "/estop.lst");
                            judgeRobustPath(dataPath + "/judgerobust");
                        }
                    };
                    launcher.init();
                    statusDone("set Data Path");
                    Platform.runLater(() -> {
                        MainApplication.getScene().setCursor(Cursor.DEFAULT);
                        AlertUtils.info("Success", "Loaded data", "All the data required for the search engines is loaded");
                    });
                } catch (comm.exception.RichFileNotFoundException e) {
                    String msg = "Please make sure you have <" + e.path + ">";
                    Debug.logMainStatus(msg);
                    statusMinor("set Data Path");
                    Platform.runLater(() -> {
                        MainApplication.getScene().setCursor(Cursor.DEFAULT);
                        AlertUtils.error("Error", "Failed to init index", msg, null);
                    });
                }
            }
        }.start();
    }

    public void bothStatus(String main, String minor) {
        setLeftStatus(main);
        setRightStatus(minor);
    }

    public void doneStatus(String lastAction) {
        setLeftStatus("done");
        setRightStatus(lastAction);
    }

    public void resetStatus() {
        setLeftStatus("");
        setRightStatus("");
    }

    @Override
    void initialize() {
        super.initialize();
//        combo_model.getItems().setAll()
//        MODELS.forEach(m->{combo_model.getItems().add(m.getClass().getSimpleName())});
//        combo_model.getItems().addAll(MODELS)
    }
}
